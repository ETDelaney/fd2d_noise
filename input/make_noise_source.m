
%==========================================================================
% generate noise source distribution
%
% [ noise_source ] = make_noise_source( make_plots )
%
% input:
%--------
% make_plots: 'yes' or 'no' (optional)
%
% output:
%--------
% noise_source: contains spectrum and distribution of psd [kg^2 m^-2 s^-2]
%
%==========================================================================


function [noise_source] = make_noise_source(make_plots)


    %======================================================================
    % user input
    %======================================================================

    % specify point location, width and strength
    %point.x_source = 2.0e5;             % in m
    %point.z_source = 1.7e5;             % in m
    %point.source_width = 5e3;           % in m
    %point.magnitude = 5.0;              % in kg^2 m^-2 s^-2
    
    % let us try it for a platform - assume point source
    % location is hard-coded for now
    point.x_source = 2.2742e3; %3.5242e3; %             % in m
    point.z_source = 3.2528e3; %4.0028e3; %             % in m
    point.source_width = 2.0e2;           % in m
    point.magnitude = 5.0;              % in kg^2 m^-2 s^-2    
    

    % specify location, width and strength of Gaussian anomaly
    gaussian.x_source = 1.0e5;          % in m
    gaussian.z_source = 1.7e5;          % in m
    %gaussian.x_source = 2.0e5;          % in m
    %gaussian.z_source = 2.0e5;          % in m
    
    gaussian.source_width = 3e4;        % in m
    gaussian.magnitude = 15.0;          % in kg^2 m^-2 s^-2
    


    %======================================================================
    % set up noise source as specified by user
    %======================================================================

    %- specify spectrum - change input_interferometry accordingly ---------
    %f_peak = 1 / 9;                     % in Hz
    %bandwidth = 0.04;                   % in Hz
    %strength = 1;
    f_peak = 0.75;
    bandwidth = 0.13; 
    strength = 1;
    
    %- define make_plots if not specified ---------------------------------
    if (nargin < 1)
        make_plots = 'yes';
    end
    
    
    %- check path ---------------------------------------------------------
    fd2d_path();


    %- get basic configuration --------------------------------------------
    [Lx, Lz, nx, nz, ~, ~, ~, ~, source_type] = input_parameters();
    [X, Z] = define_computational_domain(Lx, Lz, nx, nz);
    f_sample = input_interferometry();


    %- define source spectrum ---------------------------------------------
    %noise_source.spectrum = strength * exp(- (abs(f_sample) - f_peak) .^ 2 / bandwidth ^ 2);

    noise_source.spectrum = [0.0000362,
0.00003625,
0.00003638,
0.00003658,
0.00003685,
0.00003718,
0.00003758,
0.00003804,
0.00003858,
0.00003919,
0.00003993,
0.00004047,
0.00004229,
0.00003998,
0.00005283,
0.00004325,
0.00010991,
0.0001553,
0.00033677,
0.00049926,
0.00084858,
0.00128935,
0.00210286,
0.00315948,
0.00466227,
0.00674283,
0.00978873,
0.0143649,
0.02181088,
0.03411284,
0.05505177,
0.08950882,
0.14302869,
0.21736934,
0.30668244,
0.39675696,
0.47523074,
0.53827279,
0.5892793,
0.63579246,
0.68193368,
0.72343399,
0.77148832,
0.81840216,
0.86000183,
0.90189166,
0.94398748,
0.97219655,
0.99227092,
1.,
0.99139513,
0.96629579,
0.92080457,
0.85254189,
0.75748572,
0.65101307,
0.53705134,
0.42943324,
0.33195938,
0.2519296,
0.18899415,
0.14037799,
0.1039611,
0.07702013,
0.05703852,
0.0423414,
0.031825,
0.02387664,
0.01799177,
0.01368299,
0.01043025,
0.00799669,
0.0061862,
0.00480376,
0.0037224,
0.00291315,
0.00227063,
0.00180271,
0.00140885,
0.00112803,
0.00089003,
0.00072013,
0.0005671,
0.00047068,
0.00037111,
0.0003144,
0.00024224,
0.00020855,
0.0001577,
0.00014037,
0.00010434,
0.00009707,
0.00006974,
0.00006907,
0.00004781,
0.00005103,
0.00003436,
0.0000391,
0.00002589,
0.00003123];


%[0.00026722,
%         0.00026745,
%         0.00026815,
%         0.00026931,
%         0.00027096,
%         0.00027302,
%         0.00027577,
%         0.00027884,
%         0.00028252,
%         0.00028685,
%         0.00027471,
%         0.00034345,
%         0.00033981,
%         0.00009065,
%         0.0013932 ,
%         0.00162757,
%         0.00351953,
%         0.00457605,
%         0.00681477,
%         0.00639457,
%         0.00754831,
%         0.00767997,
%         0.00994384,
%         0.00938014,
%         0.00957052,
%         0.01065632,
%         0.01153992,
%         0.01213073,
%         0.01402459,
%         0.02553107,
%         0.041658  ,
%         0.05757844,
%         0.06707181,
%         0.07375471,
%         0.08686933,
%         0.09350802,
%         0.1041368 ,
%         0.11611213,
%         0.11869474,
%         0.12333382,
%         0.12734785,
%         0.21173084,
%         0.26031383,
%         0.46537004,
%         0.59020188,
%         0.58868582,
%         0.62801655,
%         0.70965409,
%         0.7872221 ,
%         0.91701632,
%         1.        ,
%         0.92829802,
%         0.80082188,
%         0.74518967,
%         0.69342281,
%         0.63099476,
%         0.62704653,
%         0.42887256,
%         0.29798785,
%         0.23494137,
%         0.20940377,
%         0.21119588,
%         0.16505101,
%         0.07554693,
%         0.04123145,
%         0.06385289,
%         0.07457949,
%         0.04874183,
%         0.02846255,
%         0.02796378,
%         0.02768473,
%         0.02628964,
%         0.01806074,
%         0.0171315 ,
%         0.01790715,
%         0.01303403,
%         0.01267412,
%         0.00903042,
%         0.00481618,
%         0.00467699,
%         0.00431038,
%         0.0042352 ,
%         0.00401691,
%         0.00324356,
%         0.0038074 ,
%         0.0033272 ,
%         0.00320711,
%         0.0025477 ,
%         0.0015879 ,
%         0.00079365,
%         0.00078926,
%         0.00075795,
%         0.00050784,
%         0.00057371,
%         0.00040591,
%         0.00032946,
%         0.00028751,
%         0.00024918,
%         0.00022123,
%         0.00021286];


%     noise_source.spectrum = [0.00026722,
%         0.00026745,
%         0.00026815,
%         0.00026931,
%         0.00027096,
%         0.00027302,
%         0.00027577,
%         0.00027884,
%         0.00028252,
%         0.00028685,
%         0.00027471,
%         0.00034345,
%         0.00033981,
%         0.00009065,
%         0.0013932 ,
%         0.00162757,
%         0.00351953,
%         0.00457605,
%         0.00681477,
%         0.00639457,
%         0.00754831,
%         0.00767997,
%         0.00994384,
%         0.00938014,
%         0.00827052,
%         0.00665632,
%         0.00433992,
%         0.01213073,
%         0.01402459,
%         0.02553107,
%         0.041658  ,
%         0.05757844,
%         0.06707181,
%         0.07375471,
%         0.03686933,
%         0.01350802,
%         0.0441368 ,
%         0.11611213,
%         0.09869474,
%         0.10333382,
%         0.10734785,
%         0.11173084,
%         0.26031383,
%         0.46537004,
%         0.59020188,
%         0.58868582,
%         0.42801655,
%         0.10965409,
%         0.3872221 ,
%         0.71701632,
%         1.        ,
%         0.92829802,
%         0.60082188,
%         0.24518967,
%         0.39342281,
%         0.63099476,
%         0.62704653,
%         0.42887256,
%         0.19798785,
%         0.13494137,
%         0.20940377,
%         0.21119588,
%         0.16505101,
%         0.07554693,
%         0.04123145,
%         0.06385289,
%         0.07457949,
%         0.04874183,
%         0.02546255,
%         0.01796378,
%         0.02768473,
%         0.02628964,
%         0.01806074,
%         0.0071315 ,
%         0.00790715,
%         0.01303403,
%         0.01267412,
%         0.00903042,
%         0.00431618,
%         0.00267699,
%         0.00431038,
%         0.0048352 ,
%         0.00401691,
%         0.00224356,
%         0.0008074 ,
%         0.0023272 ,
%         0.00320711,
%         0.0025477 ,
%         0.0015879 ,
%         0.00069365,
%         0.00018926,
%         0.00075795,
%         0.00050784,
%         0.00057371,
%         0.00010591,
%         0.00032946,
%         0.00018751,
%         0.00014918,
%         0.00022123,
%         0.00029286];


    %- define geographic power-spectral density distribution --------------
    if (strcmp(source_type, 'homogeneous'))

        noise_source.distribution = ones(nx, nz);

    elseif (strcmp(source_type, 'point'))

        noise_source.distribution = point.magnitude * ...
            exp(- ((X - point.x_source) .^ 2 + (Z - point.z_source) .^ 2) / point.source_width ^ 2)';

    elseif (strcmp(source_type, 'gaussian'))

        noise_source.distribution = ones(nx, nz);
        noise_source.distribution = noise_source.distribution + ...
            gaussian.magnitude * exp(- ((X - gaussian.x_source) .^ 2 + (Z - gaussian.z_source) .^ 2) / gaussian.source_width ^ 2)';
    
    %elseif (strcmp(source_type, 'gaussian_middle'))

    %    noise_source.distribution = ones(nx, nz);
    %    noise_source.distribution = noise_source.distribution + ...
    %        gaussian.magnitude * exp(- ((X - gaussian.x_source) .^ 2 + (Z - gaussian.z_source) .^ 2) / gaussian.source_width ^ 2)';
    end


    %- plot noise source configuration ------------------------------------
    if (strcmp(make_plots, 'yes'))

        fig = figure;
        set(fig, 'Color', [1 1 1])
        ax1 = gca;
        set(ax1, 'FontSize', 12)
        hold(ax1, 'on')
        grid(ax1, 'on')
        plot(ax1, f_sample, noise_source.spectrum, 'r')
        xlabel(ax1, 'frequency [Hz]');
        xlim(ax1, [f_sample(1), f_sample(end)])
        set(ax1,'XTick', [0 0.1 0.2])
        set(ax1,'YTick', [0 0.5 1])
        title(ax1, 'spectrum for noise source', 'FontSize', 14)

        if (exist([fd2d_path(), 'output', filesep, 'array_1_ref.mat'], 'file'))
            load([fd2d_path(), 'output', filesep, 'array_1_ref.mat']);
        else
            array = [];
        end

        plot_models([], noise_source.distribution, array, [], [0, 0, 0, 0]);

    end


end


